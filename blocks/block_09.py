import time
from utils.s3_upload import upload_image
import requests, os
from utils.ask_openai import ask_openai
from state.state import get_state, update_state
from utils.wants_handover_ai import wants_handover_ai
from logger import logger

GLOBAL_PROMPT = "prompts/global_prompt.txt"
STAGE_PROMPT  = "prompts/block09_prompt.txt"

# ---------------------------------------------------------------------------
def _load(p: str) -> str:
    with open(p, "r", encoding="utf-8") as f:
        return f.read()

# ---------------------------------------------------------------------------
def handle_block9(
    message_text: str,
    user_id: str,
    send_text_func,          # –∫–ª–∏–µ–Ω—Ç—É
    send_owner_text,         # –ê—Ä—Å–µ–Ω–∏—é (—Ç–µ–∫—Å—Ç)
    send_owner_media=None,   # –ê—Ä—Å–µ–Ω–∏—é (–º–µ–¥–∏–∞), –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π hand-over: —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –∏ –ø–µ—Ä–µ–¥–∞—ë–º
    –ê—Ä—Å–µ–Ω–∏—é. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è force_stage='block9' –∏–∑ –ª—é–±–æ–≥–æ –±–ª–æ–∫–∞.
    """
    if wants_handover_ai(message_text):
        # —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–¥–∞—á–∏ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ—Å—å–±—É
        pass

    st = get_state(user_id) or {}
    # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–∞–ø –¥–ª—è CRM ‚Äì —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π
    if not st.get("scenario_stage_at_handover"):
        update_state(user_id, {"scenario_stage_at_handover": st.get("stage")})
    # --- 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—é–º–µ –ê—Ä—Å–µ–Ω–∏—é (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ) ---------------------
    if not st.get("arseniy_notified"):
        reason  = st.get("handover_reason", "")
        comment = _reason_to_comment(reason)
        summary = _build_summary(st, comment)
        # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ê—Ä—Å–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è)
        msg_to_owner = summary + (
            "\n\n‚Äî‚Äì‚Äì\n"
            "üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, "
            "—Å–≤—è–∂–∏—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º."
        )
        try:
            logger.info("[block9] ‚Üí owner: %s‚Ä¶ (%d‚ÄØ—Å–∏–º–≤.)",
                        msg_to_owner[:60].replace("\n", " "),
                        len(msg_to_owner))
            send_owner_text(msg_to_owner)
            logger.info(f"[block9] summary sent to owner user={user_id}")
        except Exception as e:
            logger.error(f"[block9] failed to send owner summary: {e}")

        # --- 1a. –§–æ—Ç–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ -------------------------------------
        if st.get("celebrant_photo_id"):
            _forward_and_persist_photo(
                st["celebrant_photo_id"],
                user_id,
                send_owner_media,
            )


        update_state(user_id, {"arseniy_notified": True})

    # --- 2. –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —É–≤–µ–¥–æ–º–∏–ª–∏) ---------------
    if not st.get("client_notified_about_handover"):
        try:
            prompt = (
                _load(GLOBAL_PROMPT) + "\n\n" + _load(STAGE_PROMPT) +
                "\n\n–°–ò–¢–£–ê–¶–ò–Ø: –±–æ—Ç –ø–µ—Ä–µ–¥–∞—ë—Ç –¥–∏–∞–ª–æ–≥ –ê—Ä—Å–µ–Ω–∏—é. –°—Ñ–æ—Ä–º–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "
                "–ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏, —Å–∫–∞–∂–∏ —á—Ç–æ –ê—Ä—Å–µ–Ω–∏–π —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∑–∞–≤–µ—Ä—à–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ."
            )
            txt = ask_openai(prompt).strip()
        except Exception:
            txt = ("–°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ê—Ä—Å–µ–Ω–∏—é ‚Äì –æ–Ω –ø–æ—Å–º–æ—Ç—Ä–∏—Ç –¥–µ—Ç–∞–ª–∏ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
                   "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")
        send_text_func(txt)
        update_state(user_id, {
            "client_notified_about_handover": True,
            "last_message_ts": time.time(),
        })

    # --- 3. –ü–µ—Ä–µ—Ö–æ–¥ –∫ block10 (CRM) ---------------------------------
    _goto(user_id, "block10")

# ---------------------------------------------------------------------------
def _build_summary(st: dict, comment: str) -> str:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω. –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏ (–Ω–µ –≤—ã–¥—É–º—ã–≤–∞–µ–º).
    """
    def _yes_no(val):
        if val is True:
            return "–î–∞"
        if val is False:
            return "–ù–µ—Ç"
        return ""

    date_time = ""
    if st.get("event_date"):
        date_time = st["event_date"]
    if st.get("event_time"):
        date_time = (date_time + " " + st["event_time"]).strip()

    payment_status = ""
    if "payment_valid" in st:
        payment_status = _yes_no(st.get("payment_valid"))
    amount = st.get("payment_amount") or ""

    saw_before = ""
    if "saw_show_before" in st:
        saw_before = _yes_no(st.get("saw_show_before"))

    has_photo = "–î–∞" if st.get("celebrant_photo_id") else "–ù–µ—Ç"

    children_client = ""
    raw_children = st.get("client_children_attend")
    if isinstance(raw_children, bool):
        children_client = _yes_no(raw_children)
    elif raw_children:
        children_client = str(raw_children)

    lines = [
        "üìÑ *–†–µ–∑—é–º–µ –¥–ª—è –ê—Ä—Å–µ–Ω–∏—è*",
        f"–≠—Ç–∞–ø —Å—Ü–µ–Ω–∞—Ä–∏—è: {st.get('stage','')}",
        f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {st.get('client_name','')}",
        f"–¢–∏–ø —à–æ—É: {st.get('show_type','')}",
        f"–§–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {st.get('event_description','')}",
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç: {st.get('package','')}",
        f"–î–∞—Ç–∞, –≤—Ä–µ–º—è: {date_time}",
        f"–ê–¥—Ä–µ—Å: {st.get('address','')}",
        f"–ò–º—è –≤–∏–Ω–æ–≤–Ω–∏–∫–∞ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞: {st.get('celebrant_name','')}",
        f"–í–æ–∑—Ä–∞—Å—Ç –≤–∏–Ω–æ–≤–Ω–∏–∫–∞: {st.get('celebrant_age','')}",
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {st.get('guests_count','')}",
        f"–ü–æ–ª –≥–æ—Å—Ç–µ–π: {st.get('guests_gender','')}",
        f"–í–Ω–µ—Å–µ–Ω–∞ –ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {payment_status}",
        f"–°—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã (—Ç–µ–Ω–≥–µ): {amount}",
        f"–ë—É–¥—É—Ç –ª–∏ –¥–µ—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞: {children_client}",
        f"–í–∏–¥–µ–ª(–∞) —à–æ—É —Ä–∞–Ω—å—à–µ?: {saw_before}",
        f"–ï—Å—Ç—å —Ñ–æ—Ç–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞: {has_photo}",
    ]

    if st.get("decline_reason"):
        lines.append(f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {st.get('decline_reason')}")
    if st.get("special_wishes"):
        lines.append(f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏/–ø–æ–∂–µ–ª–∞–Ω–∏—è: {st.get('special_wishes')}")
    lines.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    return "\n".join(lines)

# ---------------------------------------------------------------------------
def _reason_to_comment(reason: str) -> str:
    mapping = {
        "asked_handover": "–ö–ª–∏–µ–Ω—Ç –ø–æ–ø—Ä–æ—Å–∏–ª –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ.",
        "early_date_or_busy": "–°—Ä–æ—á–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç ‚Äì –Ω—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.",
        "non_standard_show": "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–æ—É ‚Äì –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.",
        "objection_not_resolved": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ.",
        "client_declined": "–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞.",
        "payment_invalid": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É / —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–∫.",
        "missing_required_fields": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        "cannot_resolve_resume": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ (–Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π).",
        "unclear_in_block8": "–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ.",
        "confirmed_booking": "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã ‚Äì –∑–∞–∫–∞–∑ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.",
        "no_response_after_7_2": "–ú–æ–ª—á–∞–Ω–∏–µ –ø–æ—Å–ª–µ –¥–≤—É—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —ç—Ç–∞–ø–∞ 7.",
        "no_response_after_8_2": "–ú–æ–ª—á–∞–Ω–∏–µ –ø–æ—Å–ª–µ –¥–≤—É—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —ç—Ç–∞–ø–∞ 8.",
        "reserve_failed": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ª–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
    }
    return mapping.get(reason, reason or "")
# ---------------------------------------------------------------------------
# ‚¨áÔ∏é –ø–æ–º–æ—â–Ω–∏–∫: —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑ WhatsApp, –∫–ª–∞–¥—ë–º –≤ S3, —à–ª—ë–º –ê—Ä—Å–µ–Ω–∏—é
def _forward_and_persist_photo(media_id: str, user_id: str, send_owner_media):
    """
    ‚Ä¢ —à–ª—ë–º —Ñ–æ—Ç–æ –ê—Ä—Å–µ–Ω–∏—é (image/document)
    ‚Ä¢ –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ S3 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤ state
    –í—ã–ø–æ–ª–Ω—è–µ–º –û–î–ò–ù —Ä–∞–∑¬†‚Äî –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å celebrant_photo_url, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
    """
    from state.state import get_state, update_state
    st = get_state(user_id) or {}

    # --- 0. –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ê—Ä—Å–µ–Ω–∏—é (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ) -------
    if send_owner_media:
        try:
            send_owner_media(media_id)
        except Exception as e:
            logger.warning(f"[block9] send_owner_media fail: {e}")

    # --- 1. –µ—Å–ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞¬†‚Äî –≤—ã—Ö–æ–¥ ----------
    if st.get("celebrant_photo_url"):
        return

    # --- 2. –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL —É Meta ----------------------
    token = os.getenv("WHATSAPP_TOKEN") or st.get("wa_token")  # fallback
    try:
        meta = requests.get(
            f"https://graph.facebook.com/v17.0/{media_id}",
            headers={"Authorization": f"Bearer {token}"},
            timeout=10,
        ).json()
        file_url = meta["url"]
        img_resp = requests.get(file_url, headers={"Authorization": f"Bearer {token}"}, timeout=20)
        img_resp.raise_for_status()
    except Exception as e:
        logger.error(f"[block9] cannot fetch media {media_id}: {e}")
        return

    # --- 3. –∫–ª–∞–¥—ë–º –≤ S3 -------------------------------------------
    try:
        perm_url = upload_image(img_resp.content)
        update_state(user_id, {"celebrant_photo_url": perm_url})
        logger.info(f"[block9] photo uploaded ‚Üí {perm_url} user={user_id}")
    except Exception as e:
        logger.error(f"[block9] S3 upload failed: {e}")

# ---------------------------------------------------------------------------
def _goto(user_id: str, next_stage: str):
    update_state(user_id, {"stage": next_stage, "last_message_ts": time.time()})
    from router import route_message
    route_message("", user_id, force_stage=next_stage)