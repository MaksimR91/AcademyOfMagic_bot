# router.py
import os
from state.state import get_state
from logger import logger
from utils.whatsapp_senders import send_text, send_document, send_video, send_image

# ===== –±–ª–æ–∫–∏ ===============================================================
from blocks import (
    block_01, block_02,
    block_03a, block_03b, block_03c, block_03d,
    block_04, block_05,
    block_06a, block_06b,
    block_07, block_08,
    block_09, block_10,
)

# ‚îÄ‚îÄ —á–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω‚Äë–Ω–æ–º–µ—Ä–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ADMIN_NUMBERS = {
    num.strip() for num in os.getenv("ADMIN_NUMBERS", "").split(",") if num.strip()
}
# --- <stage> ‚Üí (module, handler_name) --------------------------------------
BLOCK_MAP = {
    "block1":  (block_01,  "handle_block1"),
    "block2":  (block_02,  "handle_block2"),
    "block3a": (block_03a, "handle_block3a"),
    "block3b": (block_03b, "handle_block3b"),
    "block3c": (block_03c, "handle_block3c"),
    "block3d": (block_03d, "handle_block3d"),
    "block4":  (block_04,  "handle_block4"),
    "block5":  (block_05,  "handle_block5"),
    "block6a": (block_06a, "handle_block6a"),
    "block6b": (block_06b, "handle_block6b"),
    "block7":  (block_07,  "handle_block7"),
    "block8":  (block_08,  "handle_block8"),
    "block9":  (block_09,  "handle_block9"),
    "block10": (block_10, "handle_block10"),
}

# ---------------------------------------------------------------------------
def route_message(
    message_text: str,
    user_id: str,
    client_name: str | None = None,
    *,
    force_stage: str | None = None
):
    """
    ¬∑ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
    ¬∑ –ì–æ—Ç–æ–≤–∏–º callables –¥–ª—è WhatsApp  
    ¬∑ –î–µ—Ä–≥–∞–µ–º –Ω—É–∂–Ω—ã–π handler‚Äë–±–ª–æ–∫
    """
    # -------- –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω—É–∂–Ω—ã –ü–ï–†–ï–î #reset) -----------
    wa_to = (get_state(user_id) or {}).get("normalized_number", user_id)
    send_text_func     = lambda body:     send_text(wa_to, body)
    send_document_func = lambda media_id: send_document(wa_to, media_id)
    send_video_func    = lambda media_id: send_video(wa_to, media_id)

    # ---------- —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ "#reset" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ----------
    if message_text.strip() == "#reset":
        if user_id in ADMIN_NUMBERS:
            from state.state import delete_state
            delete_state(user_id)

            # —á–∏—Å—Ç–∏–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∂–æ–±—ã
            from utils.reminder_engine import sched
            for job in sched.get_jobs():
                if job.id.startswith(f"{user_id}:"):
                    sched.remove_job(job.id)

            # –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É –≤ –∫–∞–Ω–∞–ª (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ª—è–º–±–¥)
            send_text(wa_to, "State cleared.")
        else:
            logger.warning("Ignored #reset from non‚Äëadmin %s", user_id)
            send_text(wa_to, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    elif message_text.strip() == "#jobs" and user_id in ADMIN_NUMBERS:
        from utils.reminder_engine import sched
        jobs = "\n".join(j.id for j in sched.get_jobs())
        send_text(wa_to, jobs or "–Ω–µ—Ç job‚Äë–æ–≤")
        return
    state = get_state(user_id) or {}
    stage = force_stage or state.get("stage", "block1")

    logger.info(f"üìç route_message ‚Üí user={user_id} stage={stage}")


    # –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ê—Ä—Å–µ–Ω–∏—é
    OWNER_WA_ID = "787057065073"                     # Meta‚Äë—Ñ–æ—Ä–º–∞—Ç (+7 ‚Ä¶ ‚Üí 7)
    send_owner_text  = lambda body: send_text(OWNER_WA_ID, body)
    def send_owner_media(media_id: str):
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ image, –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî document
        try:
            send_image(OWNER_WA_ID, media_id)
        except Exception as e_img:
            logger.warning(f"[router] send_owner_media image failed ({e_img}); retry as document")
            try:
                send_document(OWNER_WA_ID, media_id)
            except Exception as e_doc:
                logger.error(f"[router] send_owner_media document also failed: {e_doc}")

    # -------- –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥—É–ª—å –∏ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ --------------------------------
    mod, handler_name = BLOCK_MAP.get(stage, BLOCK_MAP["block1"])
    handler = getattr(mod, handler_name)

    try:
        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤: –∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –∑–Ω–∞–µ—Ç,
        # –∫–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –µ–π –Ω—É–∂–Ω—ã.
        if stage == "block4":
            handler(
                message_text,
                user_id,
                send_text_func,
                send_document_func,
                send_video_func,
            )
        elif stage == "block9":
            handler(
            message_text,
            user_id,
            send_text_func,     # –∫–ª–∏–µ–Ω—Ç
            send_owner_text,    # —Ç–µ–∫—Å—Ç –ê—Ä—Å–µ–Ω–∏—é
            send_owner_media,   # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ
        )
        else:
            handler(message_text, user_id, send_text_func)
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ {stage} –¥–ª—è {user_id}: {e}")
        send_text_func("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # router –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ‚Äî –≤—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–ª–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–æ–≤
