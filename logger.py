import logging
# –Ω–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä, —É–º–µ—é—â–∏–π –ø–∏—Å–∞—Ç—å –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
from concurrent_log_handler import ConcurrentTimedRotatingFileHandler
import os
import time
import boto3
from botocore.config import Config
from datetime import datetime, timedelta

# ==== –ù–ê–°–¢–†–û–ô–ö–ò S3 ====
AWS_ACCESS_KEY_ID = os.getenv("YANDEX_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("YANDEX_SECRET_ACCESS_KEY")
BUCKET_NAME = "magicacademylogsars"
ENDPOINT_URL = "https://storage.yandexcloud.net"
REGION_NAME = "ru-central1"

# ==== –ü–ê–ü–ö–ê –î–õ–Ø –õ–û–ì–û–í ====
LOG_DIR = "/tmp/logs"
os.makedirs(LOG_DIR, exist_ok=True)

# ==== S3 –ö–õ–ò–ï–ù–¢ ====
s3_config = Config(connect_timeout=5, read_timeout=10)
s3_client = boto3.client(
    "s3",
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    endpoint_url=ENDPOINT_URL,
    config=s3_config
)

# ==== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –õ–û–ì–ì–ï–† ====
logger_s3 = logging.getLogger("s3_logger")
logger_s3.setLevel(logging.INFO)
s3_console = logging.StreamHandler()
s3_console.setFormatter(logging.Formatter("[%(asctime)s] [%(levelname)s] [S3] %(message)s"))
logger_s3.addHandler(s3_console)
logger_s3.propagate = False

# ==== –ö–ê–°–¢–û–ú–ù–´–ô –•–≠–ù–î–õ–ï–† (multi‚Äëprocess) ====
class S3TimedRotatingFileHandler(ConcurrentTimedRotatingFileHandler):
    def doRollover(self):
        logger_s3.info("üîÑ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ (super().doRollover())")
        super().doRollover()
        time.sleep(2)

        from rollover_scheduler import schedule_s3_upload
        schedule_s3_upload()
        logger_s3.info("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞ –≤ S3 –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥")

# ==== –§–û–†–ú–ê–¢ –õ–û–ì–û–í ====
formatter = logging.Formatter("[%(asctime)s] [%(levelname)s] %(message)s", "%Y-%m-%d %H:%M:%S")

# ==== –•–≠–ù–î–õ–ï–†–´ (—Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª) ====
file_handler = S3TimedRotatingFileHandler(
    os.path.join(LOG_DIR, "log"),
    when="midnight",
    interval=1,
    backupCount=14,
    encoding="utf-8",
    utc=True,   # —Ä–æ—Ç–∞—Ü–∏—è —Ä–æ–≤–Ω–æ –≤ 00:00‚ÄØUTC
    delay=True  # —Ñ–∞–π–ª –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º emit(), —ç–∫–æ–Ω–æ–º–∏—Ç –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
)
file_handler.suffix = "%Y-%m-%d.log"
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(formatter)

# ==== –ì–õ–ê–í–ù–´–ô –õ–û–ì–ì–ï–† ====
logger = logging.getLogger()
logger.setLevel(logging.INFO)
# ---- Console handler (Render dashboard) ----
#  ‚Ä¢ –≤—ã–≤–æ–¥–∏—Ç –≤—Å—ë ‚â•INFO –≤ stderr ‚Üí —Å—Ä–∞–∑—É –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–∏—Å–∞
#  ‚Ä¢ –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π –ø—Ä–∏ per‚Äëprocess init
if not any(isinstance(h, logging.StreamHandler) for h in logger.handlers):
    console_handler = logging.StreamHandler()          # stderr –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

# ‚îÄ‚îÄ‚îÄ –í–∞–∂–Ω–æ: —Ç–æ –∂–µ —Å–∞–º–æ–µ –ø–æ–¥—Å–æ–≤—ã–≤–∞–µ–º gunicorn‚Äë–ª–æ–≥–≥–µ—Ä—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
guni = logging.getLogger("gunicorn.error")
guni.setLevel(logging.INFO)
for h in logger.handlers:            # —Ñ–∞–π–ª –∏ console
    if h not in guni.handlers:
        guni.addHandler(h)
# –¢–µ–ø–µ—Ä—å –í–°–Å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç logger.info(...), –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
# –ø–æ–ø–∞–¥–∞–µ—Ç –∏ –≤ —Ñ–∞–π–ª—ã, –∏ –≤ –∫–æ–Ω—Å–æ–ª—å Render.


# ---- File handler ----
# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
if not any(isinstance(h, S3TimedRotatingFileHandler) for h in logger.handlers):
    logger.addHandler(file_handler)

# ==== FALLBACK ====
if not logger.handlers:
    logging.basicConfig(
        filename=f"/tmp/logger_{datetime.now():%Y-%m-%d}.log",
        level=logging.DEBUG,
        format='%(asctime)s [%(levelname)s] %(message)s'
    )
    logger.debug("logger.py basicConfig fallback activated")

# ==== –†–£–ß–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê ====
def upload_to_s3_manual():
    yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
    local_path = os.path.join(LOG_DIR, f"log.{yesterday}.log")
    s3_key = f"logs/log.{yesterday}.log"

    logger_s3.info("üöÄ –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ S3")
    if not os.path.exists(local_path):
        logger_s3.warning("‚ùó –õ–æ–≥-—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ—á–µ–≥–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å")
        return

    try:
        with open(local_path, 'r', encoding='utf-8') as f:
            content = f.read()
            logger_s3.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π (—Ä—É—á–Ω–∞—è):\n{content}")
    except Exception as e:
        logger_s3.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π: {e}")

    try:
        s3_client.upload_file(local_path, BUCKET_NAME, s3_key)
        logger_s3.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Ä—É—á–Ω—É—é: {s3_key}")

        try:
            s3_client.head_object(Bucket=BUCKET_NAME, Key=s3_key)
            logger_s3.info("üîç HEAD –∑–∞–ø—Ä–æ—Å (—Ä—É—á–Ω–∞—è): —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–∏–ª—Å—è –≤ –±–∞–∫–µ—Ç–µ")
        except s3_client.exceptions.ClientError as e:
            logger_s3.warning(f"‚ùó HEAD-–∑–∞–ø—Ä–æ—Å (—Ä—É—á–Ω–∞—è): —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—à–∏–±–∫–∞: {e}")

    except Exception as e:
        logger_s3.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3")

if __name__ == "__main__":
    logger_s3.info("main() logger.py ‚Äî —Ç–µ—Å—Ç —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
    upload_to_s3_manual()
