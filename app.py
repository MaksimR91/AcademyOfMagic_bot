import os
import gc
import psutil
import time
import threading
import logging
from datetime import datetime
from flask import Flask, request, jsonify, render_template_string, abort
from logger import logger
import requests
from openai import OpenAI, RateLimitError, APIError, Timeout, AuthenticationError
from pydub import AudioSegment

# Supabase config
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
SUPABASE_TABLE_NAME = "tokens"

SUPABASE_HEADERS = {
    "apikey": SUPABASE_API_KEY,
    "Authorization": f"Bearer {SUPABASE_API_KEY}",
    "Content-Type": "application/json"
}

def load_token_from_supabase():
    url = f"{SUPABASE_URL}/rest/v1/{SUPABASE_TABLE_NAME}?select=token&order=updated_at.desc&limit=1"
    response = requests.get(url, headers=SUPABASE_HEADERS)
    data = response.json()
    if data:
        return data[0]["token"]
    return ""

def save_token_to_supabase(token: str):
    url = f"{SUPABASE_URL}/rest/v1/{SUPABASE_TABLE_NAME}"
    payload = {"token": token}
    response = requests.post(url, json=payload, headers=SUPABASE_HEADERS)
    return response.status_code == 201

# ======= –õ–û–ö–ê–õ–¨–ù–´–ô –õ–û–ì–ì–ï–† –î–õ–Ø –ü–ï–†–í–û–ì–û –≠–¢–ê–ü–ê –ó–ê–ü–£–°–ö–ê ========
os.makedirs("tmp", exist_ok=True)
logging.basicConfig(
    filename=f"tmp/app_start_{datetime.now():%Y-%m-%d}.log",
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger("myapp")
logger.propagate = False
logger.info("üü¢ app.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

app = Flask(__name__)

API_URL = "https://graph.facebook.com/v15.0/{phone_number_id}/messages"
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
openai_api_key = os.getenv("OPENAI_APIKEY")
META_APP_ID = os.getenv("META_APP_ID")
META_APP_SECRET = os.getenv("META_APP_SECRET")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

def send_telegram_alert(text):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("‚ö†Ô∏è TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        resp = requests.post(url, json=payload, timeout=10)
        if resp.status_code == 200:
            logger.info("üì¢ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {resp.status_code} {resp.text}")
    except Exception as e:
        logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

client = OpenAI(api_key=openai_api_key)
logger.info(f"üîê OpenAI API key –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞: {openai_api_key[:5]}..., –¥–ª–∏–Ω–∞: {len(openai_api_key)}")

SKIP_AI_PHRASES = ["–æ–∫", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–Ω—è—Ç–Ω–æ", "—è—Å–Ω–æ", "–ø–æ–∫–∞", "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞—Å—Ç–µ", "–¥–∞", "–Ω–µ—Ç"]
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")
WHATSAPP_TOKEN = load_token_from_supabase()
logger.info(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∏–∑ Supabase: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ {WHATSAPP_TOKEN[:8]}..., –¥–ª–∏–Ω–∞: {len(WHATSAPP_TOKEN)}")

form_template = """
<!DOCTYPE html>
<html>
<head><title>–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω</title></head>
<body>
  <h2>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ WhatsApp</h2>
  {% if message %}<p style=\"color:green\">{{ message }}</p>{% endif %}
  <form method=\"POST\">
    –ü–∞—Ä–æ–ª—å: <input type=\"password\" name=\"password\"><br><br>
    –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω:<br>
    <textarea name=\"token\" rows=\"6\" cols=\"80\"></textarea><br><br>
    <input type=\"submit\" value=\"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å\">
  </form>
</body>
</html>
"""

@app.route("/admin/token", methods=["GET", "POST"])
def update_token():
    global WHATSAPP_TOKEN
    message = None
    if request.method == "POST":
        password = request.form.get("password")
        if password != ADMIN_PASSWORD:
            abort(403)
        token = request.form.get("token", "").strip()
        logger.info(f"üì• –¢–æ–∫–µ–Ω –∏–∑ —Ñ–æ—Ä–º—ã (repr): {repr(token)}")
        if token:
            save_token_to_supabase(token)
            WHATSAPP_TOKEN = token
            message = "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!"
    return render_template_string(form_template, message=message)

def get_token():
    return WHATSAPP_TOKEN

def check_token_validity():
    token = get_token()
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ {token[:8]}..., –¥–ª–∏–Ω–∞: {len(token)}")
    url = f"https://graph.facebook.com/oauth/access_token_info?client_id={META_APP_ID}&client_secret={META_APP_SECRET}&access_token={token}"
    try:
        resp = requests.get(url, timeout=10)
        logger.info(f"üì° Meta –æ—Ç–≤–µ—Ç: {resp.status_code} {resp.text}")
        if resp.status_code != 200:
            logger.warning("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –°–æ–æ–±—â–∞–µ–º –≤ Telegram...")
            send_telegram_alert("‚ùóÔ∏è–¢–æ–∫–µ–Ω WhatsApp –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ó–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")
        else:
            logger.info("‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        send_telegram_alert(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ WhatsApp: {e}")


def start_token_check_loop():
    def loop():
        while True:
            check_token_validity()
            time.sleep(86400)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
    threading.Thread(target=loop, daemon=True).start()

# –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
start_token_check_loop()
def cleanup_temp_files():
    tmp_path = "/tmp"
    if os.path.exists(tmp_path):
        for fname in os.listdir(tmp_path):
            if fname.endswith(('.wav', '.mp3', '.ogg')):
                try:
                    os.remove(os.path.join(tmp_path, fname))
                    logger.info(f"ü•π –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {fname}")
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {fname}: {e}")
    for fname in os.listdir("tmp"):
        if fname.startswith("app_start_") and fname.endswith(".log"):
            try:
                os.remove(os.path.join("tmp", fname))
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ª–æ–≥–∞ {fname}: {e}")

def start_memory_cleanup_loop():
    def loop():
        while True:
            time.sleep(600)
            gc.collect()
            process = psutil.Process()
            mem_mb = process.memory_info().rss / 1024 / 1024
            logger.info(f"üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {mem_mb:.2f} MB")
    threading.Thread(target=loop, daemon=True).start()

start_memory_cleanup_loop()
def log_memory_usage():
    process = psutil.Process()
    mem_mb = process.memory_info().rss / 1024 / 1024
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {mem_mb:.2f} MB")

def cleanup_temp_files():
    tmp_path = "/tmp"
    if not os.path.exists(tmp_path):
        return
    for fname in os.listdir(tmp_path):
        if fname.endswith((".wav", ".mp3", ".ogg")):
            try:
                os.remove(os.path.join(tmp_path, fname))
                logger.info(f"ü•π –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {fname}")
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {fname}: {e}")

@app.route('/', methods=['GET'])
def home():
    logger.info("üè† –ó–∞–ø—Ä–æ—Å GET /")
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/ping")
def ping():
    logger.info("üîî –ó–∞–ø—Ä–æ—Å PING")
    return "OK", 200

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')

        if mode == 'subscribe' and token == VERIFY_TOKEN:
            logger.info("WEBHOOK VERIFIED")
            return challenge, 200
        else:
            logger.error("VERIFICATION FAILED")
            return "Verification failed", 403

    elif request.method == 'POST':
        data = request.json
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", data)

        if data.get('object') == 'whatsapp_business_account':
            for entry in data.get('entry', []):
                for change in entry.get('changes', []):
                    value = change.get('value', {})

                    for message in value.get('messages', []):
                        handle_message(
                            message,
                            value['metadata']['phone_number_id'],
                            value['metadata']['display_phone_number'],
                            value.get('contacts', [])
                        )

                    for status in value.get('statuses', []):
                        handle_status(status)

        return jsonify({"status": "success"}), 200

def handle_message(message, phone_number_id, bot_display_number, contacts):
    from_number = message.get("from")

    if from_number.endswith(bot_display_number[-9:]):
        logger.info("üîÅ –≠—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    normalized_number = normalize_for_meta(from_number)
    name = contacts[0].get("profile", {}).get("name") if contacts else "–¥—Ä—É–≥"

    if message.get("type") == "text":
        text = message.get("text", {}).get("body", "").strip()
        process_text_message(text, normalized_number, phone_number_id, name)

    elif message.get("type") == "audio":
        logger.info("üé§ –ê—É–¥–∏–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –Ω–∞ —Ñ–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        threading.Thread(target=handle_audio_async, args=(message, phone_number_id, normalized_number, name), daemon=True).start()

def handle_audio_async(message, phone_number_id, normalized_number, name):
    try:
        audio_id = message["audio"]["id"]
        logger.info(f"üéø –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, media ID: {audio_id}")

        url = f"https://graph.facebook.com/v15.0/{audio_id}"
        headers = {"Authorization": f"Bearer {get_token()}"}
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        media_url = resp.json().get("url")

        media_resp = requests.get(media_url, headers=headers, timeout=30)
        media_resp.raise_for_status()
        audio_path = "/tmp/audio.ogg"
        with open(audio_path, "wb") as f:
            f.write(media_resp.content)

        audio = AudioSegment.from_file(audio_path)
        duration_sec = len(audio) / 1000
        logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_sec:.1f} —Å–µ–∫—É–Ω–¥")

        if duration_sec > 60:
            logger.warning("‚ö†Ô∏è –ê—É–¥–∏–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 60 —Å–µ–∫—É–Ω–¥")
            send_text_message(phone_number_id, normalized_number,
                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã.")
            return

        with open(audio_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text"
            )
        logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcript}")
        text = transcript.strip()

        if text:
            process_text_message(text, normalized_number, phone_number_id, name)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")

def process_text_message(text, normalized_number, phone_number_id, name):
    if not text:
        return

    logger.info(f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {normalized_number}: {text}")

    if text.lower() in SKIP_AI_PHRASES:
        return

    if len(text) > 500:
        text = text[:500]

    try:
        response = get_ai_response(text)
        send_text_message(phone_number_id, normalized_number, response)
        return

    except AuthenticationError as e:
        logger.error(f"üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")

    except RateLimitError:
        logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI")
        send_text_message(phone_number_id, normalized_number, "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    except (APIError, Timeout) as e:
        logger.error(f"‚õîÔ∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")
        send_text_message(phone_number_id, normalized_number, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    except Exception as e:
        logger.error(f"ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")

    category = extract_category(text)
    if name and category:
        sent = send_template_message(phone_number_id, normalized_number, "test_template_1", [name, category])
        if sent:
            return

    send_text_message(phone_number_id, normalized_number, "–ü—Ä–∏–≤–µ—Ç, –¥–æ–ª–±–æ–µ–± –º–æ–π –¥—Ä—É–≥! –ß—Ç–æ —Ö–æ—Ç–µ–ª, –¥–æ–ª–±–æ–µ–± –º–æ–π –¥—Ä—É–≥!")

def get_ai_response(prompt):
    try:
        start = time.time()
        response = client.chat.completions.create(
            model="gpt-3.5-turbo-0125",
            messages=[
                {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç–∞ –ê—Ä—Å–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=150,
            timeout=20
        )
        end = time.time()
        logger.info(f"üïí –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OpenAI: {end - start:.2f} —Å–µ–∫")
        logger.info(f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")
        return response.choices[0].message.content.strip()

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."

def extract_category(text):
    lowered = text.lower()
    if "–≤–∑—Ä–æ—Å–ª" in lowered:
        return "–≤–∑—Ä–æ—Å–ª–æ–µ"
    if "–¥–µ—Ç—Å–∫" in lowered:
        return "–¥–µ—Ç—Å–∫–æ–µ"
    if "—Å–µ–º–µ–π–Ω" in lowered:
        return "—Å–µ–º–µ–π–Ω–æ–µ"
    return "–Ω–∞—à–µ"

def normalize_for_meta(number):
    if number.startswith('77'):
        return '787' + number[2:]
    if number.startswith('79'):
        return '789' + number[2:]
    return number

def send_text_message(phone_number_id, to, text):
    url = API_URL.format(phone_number_id=phone_number_id)
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "text",
        "text": {"body": text}
    }
    response = requests.post(url, headers=headers, json=payload)
    resp_text = response.text[:500] + "..." if len(response.text) > 500 else response.text
    logger.info(f"‚û°Ô∏è WhatsApp {to}, —Å—Ç–∞—Ç—É—Å: {response.status_code}, –æ—Ç–≤–µ—Ç: {resp_text}")

def send_template_message(phone_number_id, to, template_name, variables):
    url = API_URL.format(phone_number_id=phone_number_id)
    headers = {
        "Authorization": f"Bearer {get_token()}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "template",
        "template": {
            "name": template_name,
            "language": {"code": "ru"},
            "components": [
                {
                    "type": "body",
                    "parameters": [{"type": "text", "text": var} for var in variables]
                }
            ]
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    logger.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ {to}")
    logger.info("API WhatsApp –æ—Ç–≤–µ—Ç: %s %s", response.status_code, response.text)
    return response.status_code == 200

def handle_status(status):
    logger.info("üì• –°—Ç–∞—Ç—É—Å: %s", status)

if __name__ == '__main__':
    logging.debug("üöÄ –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ __main__")
    try:
        logger.info("üì° –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ Flask...")
        app.run(host='0.0.0.0', port=5000)
    except Exception as e:
        logging.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
