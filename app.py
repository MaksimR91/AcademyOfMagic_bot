from flask import Flask, request, jsonify
from logger import logger
import requests
import os
from openai import OpenAI, RateLimitError, APIError, Timeout, AuthenticationError  # ‚¨ÖÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω AuthenticationError

app = Flask(__name__)

ACCESS_TOKEN = "EAAIdbZCyeyLoBOzWYoEwiqYtC184ujYfMPQrHo9lp1YKiO4SO5PZB9oPengNIZA0BqLkxhR87bHJqnDgAo9WmdcrQ7M7h4fGZApChpYKItpHSNfW0cPnzuP6ifIyH3e66QvWADnMfZBik9uc40DkxwMeBJCHety9RYnA8KZAPVrBiqPZBjZCtBdKRDbOY4jzem6zeAZCxcTF1pZAhXgY72PvMkyGAwZCvBW3d5VtMNNEaD4zxFvlDMpGNoZD"
API_URL = "https://graph.facebook.com/v15.0/{phone_number_id}/messages"
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
openai_api_key = os.getenv("OPENAI_APIKEY")

client = OpenAI(api_key=openai_api_key)
logger.info(f"üîê OpenAI API key –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞: {openai_api_key[:5]}..., –¥–ª–∏–Ω–∞: {len(openai_api_key)}")

SKIP_AI_PHRASES = ["–æ–∫", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–Ω—è—Ç–Ω–æ", "—è—Å–Ω–æ", "–ø–æ–∫–∞", "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞—Å—Ç–µ", "–¥–∞", "–Ω–µ—Ç"]

@app.route('/', methods=['GET'])
def home():
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/ping")
def ping():
    return "OK", 200

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')

        if mode == 'subscribe' and token == VERIFY_TOKEN:
            logger.info("WEBHOOK VERIFIED")
            return challenge, 200
        else:
            logger.error("VERIFICATION FAILED")
            return "Verification failed", 403

    elif request.method == 'POST':
        data = request.json
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", data)

        if data.get('object') == 'whatsapp_business_account':
            for entry in data.get('entry', []):
                for change in entry.get('changes', []):
                    value = change.get('value', {})

                    for message in value.get('messages', []):
                        handle_message(
                            message,
                            value['metadata']['phone_number_id'],
                            value['metadata']['display_phone_number'],
                            value.get('contacts', [])
                        )

                    for status in value.get('statuses', []):
                        handle_status(status)

        return jsonify({"status": "success"}), 200

def handle_message(message, phone_number_id, bot_display_number, contacts):
    from_number = message.get("from")

    if from_number.endswith(bot_display_number[-9:]):
        logger.info("üîÅ –≠—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    text = message.get("text", {}).get("body", "").strip()
    if not text:
        logger.info("üìé –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    name = contacts[0].get("profile", {}).get("name") if contacts else "–¥—Ä—É–≥"
    category = extract_category(text)
    normalized_number = normalize_for_meta(from_number)

    logger.info(f"üì¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {normalized_number}: {text}")

    if text.lower() in SKIP_AI_PHRASES:
        logger.info("üìÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, OpenAI –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
        return

    if len(text) > 500:
        text = text[:500]

    try:
        # üí¨ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        response = get_ai_response(text)
        send_text_message(phone_number_id, normalized_number, response)
        return

    except AuthenticationError as e:
    logger.error(f"üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")

    except RateLimitError:
        logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI")
        send_text_message(phone_number_id, normalized_number, "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    except (APIError, Timeout) as e:
        logger.error(f"‚õîÔ∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")
        send_text_message(phone_number_id, normalized_number, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    except Exception as e:
        logger.error(f"ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
    if name and category:
        sent = send_template_message(phone_number_id, normalized_number, "test_template_1", [name, category])
        if sent:
            return

    send_text_message(phone_number_id, normalized_number, "–ü—Ä–∏–≤–µ—Ç, –¥–æ–ª–±–æ–µ–± –º–æ–π –¥—Ä—É–≥! –ß—Ç–æ —Ö–æ—Ç–µ–ª, –¥–æ–ª–±–æ–µ–± –º–æ–π –¥—Ä—É–≥!")

def get_ai_response(prompt):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo-0125",
        messages=[
            {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç–∞ –ê—Ä—Å–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=150
    )
    logger.info(f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")
    return response.choices[0].message.content.strip()

def extract_category(text):
    lowered = text.lower()
    if "–≤–∑—Ä–æ—Å–ª" in lowered:
        return "–≤–∑—Ä–æ—Å–ª–æ–µ"
    if "–¥–µ—Ç—Å–∫" in lowered:
        return "–¥–µ—Ç—Å–∫–æ–µ"
    if "—Å–µ–º–µ–π–Ω" in lowered:
        return "—Å–µ–º–µ–π–Ω–æ–µ"
    return "–Ω–∞—à–µ"

def normalize_for_meta(number):
    if number.startswith('77'):
        return '787' + number[2:]
    if number.startswith('79'):
        return '789' + number[2:]
    return number

def send_text_message(phone_number_id, to, text):
    url = API_URL.format(phone_number_id=phone_number_id)
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "text",
        "text": {
            "body": text
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    logger.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ {to}")
    logger.info("API WhatsApp –æ—Ç–≤–µ—Ç: %s %s", response.status_code, response.text)

def send_template_message(phone_number_id, to, template_name, variables):
    url = API_URL.format(phone_number_id=phone_number_id)
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "template",
        "template": {
            "name": template_name,
            "language": {"code": "ru"},
            "components": [
                {
                    "type": "body",
                    "parameters": [{"type": "text", "text": var} for var in variables]
                }
            ]
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    logger.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ {to}")
    logger.info("API WhatsApp –æ—Ç–≤–µ—Ç: %s %s", response.status_code, response.text)
    return response.status_code == 200

def handle_status(status):
    logger.info("üì• –°—Ç–∞—Ç—É—Å: %s", status)


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


