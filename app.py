from flask import Flask, request, jsonify
from logger import logger
import requests
import os
import gc
import psutil
import time
import threading
from openai import OpenAI, RateLimitError, APIError, Timeout, AuthenticationError
from pydub import AudioSegment

app = Flask(__name__)

ACCESS_TOKEN = "EAAIdbZCyeyLoBOyywQJnsPiCzKUk9vZC1jTxZA784QiKLbeZBnejCZCiRIAiPkCuu79I8ZC8hGrxKQeSqw1ODsH4jSJCoD4q2DQobsB0AReH2rzx6V5dbv3DfOLrXnfh02Esk5TupjTZAhVueHyJ1ZAPZCzTSh8cq4k9pbXxMPqK2aEyxpZAPd44obuxXvYeTnLf6mCisBlsZAbbbltBryjfziUNoiEZBaghKCC6p6d2hr6yB0dm9a7yZCqRILRmkgeFpbAZDZD"
API_URL = "https://graph.facebook.com/v15.0/{phone_number_id}/messages"
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
openai_api_key = os.getenv("OPENAI_APIKEY")

client = OpenAI(api_key=openai_api_key)
logger.info(f"üîê OpenAI API key –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞: {openai_api_key[:5]}..., –¥–ª–∏–Ω–∞: {len(openai_api_key)}")

SKIP_AI_PHRASES = ["–æ–∫", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–Ω—è—Ç–Ω–æ", "—è—Å–Ω–æ", "–ø–æ–∫–∞", "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞—Å—Ç–µ", "–¥–∞", "–Ω–µ—Ç"]

@app.after_request
def after_request_cleanup(response):
    gc.collect()
    log_memory_usage()
    cleanup_temp_files()
    return response

def log_memory_usage():
    process = psutil.Process()
    mem_mb = process.memory_info().rss / 1024 / 1024
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {mem_mb:.2f} MB")

def cleanup_temp_files():
    tmp_path = "/tmp"
    if not os.path.exists(tmp_path):
        return
    for fname in os.listdir(tmp_path):
        if fname.endswith((".wav", ".mp3", ".ogg")):
            try:
                os.remove(os.path.join(tmp_path, fname))
                logger.info(f"ü•π –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {fname}")
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {fname}: {e}")

@app.route('/', methods=['GET'])
def home():
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/ping")
def ping():
    return "OK", 200

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')

        if mode == 'subscribe' and token == VERIFY_TOKEN:
            logger.info("WEBHOOK VERIFIED")
            return challenge, 200
        else:
            logger.error("VERIFICATION FAILED")
            return "Verification failed", 403

    elif request.method == 'POST':
        data = request.json
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", data)

        if data.get('object') == 'whatsapp_business_account':
            for entry in data.get('entry', []):
                for change in entry.get('changes', []):
                    value = change.get('value', {})

                    for message in value.get('messages', []):
                        handle_message(
                            message,
                            value['metadata']['phone_number_id'],
                            value['metadata']['display_phone_number'],
                            value.get('contacts', [])
                        )

                    for status in value.get('statuses', []):
                        handle_status(status)

        return jsonify({"status": "success"}), 200

def handle_message(message, phone_number_id, bot_display_number, contacts):
    from_number = message.get("from")

    if from_number.endswith(bot_display_number[-9:]):
        logger.info("üîÅ –≠—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    normalized_number = normalize_for_meta(from_number)
    name = contacts[0].get("profile", {}).get("name") if contacts else "–¥—Ä—É–≥"

    if message.get("type") == "text":
        text = message.get("text", {}).get("body", "").strip()
        process_text_message(text, normalized_number, phone_number_id, name)

    elif message.get("type") == "audio":
        logger.info("üé§ –ê—É–¥–∏–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –Ω–∞ —Ñ–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        threading.Thread(target=handle_audio_async, args=(message, phone_number_id, normalized_number, name)).start()

def handle_audio_async(message, phone_number_id, normalized_number, name):
    try:
        audio_id = message["audio"]["id"]
        logger.info(f"üéß –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, media ID: {audio_id}")
        text = transcribe_voice_message(audio_id)
        if not text:
            return
        process_text_message(text, normalized_number, phone_number_id, name)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")

def process_text_message(text, normalized_number, phone_number_id, name):
    if not text:
        return

    logger.info(f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {normalized_number}: {text}")

    if text.lower() in SKIP_AI_PHRASES:
        return

    if len(text) > 500:
        text = text[:500]

    try:
        response = get_ai_response(text)
        send_text_message(phone_number_id, normalized_number, response)
        return

    except AuthenticationError as e:
        logger.error(f"üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")

    except RateLimitError:
        logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI")
        send_text_message(phone_number_id, normalized_number, "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    except (APIError, Timeout) as e:
        logger.error(f"‚õîÔ∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")
        send_text_message(phone_number_id, normalized_number, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    except Exception as e:
        logger.error(f"ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}")

    category = extract_category(text)
    if name and category:
        sent = send_template_message(phone_number_id, normalized_number, "test_template_1", [name, category])
        if sent:
            return

    send_text_message(phone_number_id, normalized_number, "–ü—Ä–∏–≤–µ—Ç, –¥–æ–ª–±–æ–µ–± –º–æ–π –¥—Ä—É–≥! –ß—Ç–æ —Ö–æ—Ç–µ–ª, –¥–æ–ª–±–æ–µ–± –º–æ–π –¥—Ä—É–≥!")

def transcribe_voice_message(audio_id):
    try:
        url = f"https://graph.facebook.com/v15.0/{audio_id}"
        headers = {"Authorization": f"Bearer {ACCESS_TOKEN}"}
        resp = requests.get(url, headers=headers)
        resp.raise_for_status()
        media_url = resp.json().get("url")

        media_resp = requests.get(media_url, headers=headers)
        media_resp.raise_for_status()
        audio_path = "/tmp/audio.ogg"
        with open(audio_path, "wb") as f:
            f.write(media_resp.content)

        audio = AudioSegment.from_file(audio_path)
        duration_sec = len(audio) / 1000
        logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_sec:.1f} —Å–µ–∫—É–Ω–¥")
        if duration_sec > 60:
            logger.warning("‚ö†Ô∏è –ê—É–¥–∏–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 60 —Å–µ–∫—É–Ω–¥")
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã."

        with open(audio_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text"
            )
        logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcript}")
        return transcript.strip()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        return None

def get_ai_response(prompt):
    start = time.time()
    response = client.chat.completions.create(
        model="gpt-3.5-turbo-0125",
        messages=[
            {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç–∞ –ê—Ä—Å–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=150,
        timeout=20
    )
    end = time.time()
    logger.info(f"üïí –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OpenAI: {end - start:.2f} —Å–µ–∫")
    logger.info(f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")
    return response.choices[0].message.content.strip()

def extract_category(text):
    lowered = text.lower()
    if "–≤–∑—Ä–æ—Å–ª" in lowered:
        return "–≤–∑—Ä–æ—Å–ª–æ–µ"
    if "–¥–µ—Ç—Å–∫" in lowered:
        return "–¥–µ—Ç—Å–∫–æ–µ"
    if "—Å–µ–º–µ–π–Ω" in lowered:
        return "—Å–µ–º–µ–π–Ω–æ–µ"
    return "–Ω–∞—à–µ"

def normalize_for_meta(number):
    if number.startswith('77'):
        return '787' + number[2:]
    if number.startswith('79'):
        return '789' + number[2:]
    return number

def send_text_message(phone_number_id, to, text):
    url = API_URL.format(phone_number_id=phone_number_id)
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "text",
        "text": {"body": text}
    }
    response = requests.post(url, headers=headers, json=payload)
    logger.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ {to}")
    logger.info("API WhatsApp –æ—Ç–≤–µ—Ç: %s %s", response.status_code, response.text)

def send_template_message(phone_number_id, to, template_name, variables):
    url = API_URL.format(phone_number_id=phone_number_id)
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "template",
        "template": {
            "name": template_name,
            "language": {"code": "ru"},
            "components": [
                {
                    "type": "body",
                    "parameters": [{"type": "text", "text": var} for var in variables]
                }
            ]
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    logger.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ {to}")
    logger.info("API WhatsApp –æ—Ç–≤–µ—Ç: %s %s", response.status_code, response.text)
    return response.status_code == 200

def handle_status(status):
    logger.info("üì• –°—Ç–∞—Ç—É—Å: %s", status)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
