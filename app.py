from flask import Flask, request, jsonify
from logger import logger
import requests

app = Flask(__name__)

ACCESS_TOKEN = "EAAIdbZCyeyLoBOxxy2S2mlFpAiS9Vrl64FCu9MSwbQN7yWRneFY8k8ZAUyBuxaezT5ORSLnY6mkhF0OzrakdkZA7aGNiaZCMWbdMoIvn15Mz2cuAYZAtTK393hwMhpWQvPy6Bm1Y01LJmEWifni4tIIamM2rWmUzvGc4r4nGKeaHj2mYNjWPpRuAXzG6C6gGKOG4JYBzWMZAgjcSQF7cQePxGyKmjx68TKQq9dxJ2fYWfAuZCtHuPAZD"
API_URL = "https://graph.facebook.com/v15.0/{phone_number_id}/messages"

@app.route('/', methods=['GET'])
def home():
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')

        if mode == 'subscribe' and token == VERIFY_TOKEN:
            logger.info("WEBHOOK VERIFIED")
            return challenge, 200
        else:
            logger.error("VERIFICATION FAILED")
            return "Verification failed", 403

    elif request.method == 'POST':
        data = request.json
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", data)

        if data.get('object') == 'whatsapp_business_account':
            for entry in data.get('entry', []):
                for change in entry.get('changes', []):
                    value = change.get('value', {})

                    # –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    for message in value.get('messages', []):
                        handle_message(
                            message,
                            value['metadata']['phone_number_id'],
                            value['metadata']['display_phone_number']
                        )

                    # –°—Ç–∞—Ç—É—Å—ã (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∏ —Ç.–ø.)
                    for status in value.get('statuses', []):
                        handle_status(status)

        return jsonify({"status": "success"}), 200

def handle_message(message, phone_number_id, bot_display_number):
    from_number = message.get("from")

    # ‚õîÔ∏è –≠—Ö–æ-—Ñ–∏–ª—å—Ç—Ä ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    if from_number.endswith(bot_display_number[-9:]):
        logger.info("üîÅ –≠—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    # ‚ö†Ô∏è –§–∏–ª—å—Ç—Ä –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ç—É—Å –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä)
    text = message.get("text", {}).get("body")
    if not text:
        logger.info("üìé –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    normalized_number = normalize_for_meta(from_number)
    logger.info(f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {normalized_number}: {text}")

    # üî† –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è
    name = message.get("profile", {}).get("name", "–¥—Ä—É–≥")

    # üéØ –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if "–¥–µ—Ç—Å–∫" in text.lower():
        show_type = "–¥–µ—Ç—Å–∫–æ–µ"
    elif "–≤–∑—Ä–æ—Å–ª" in text.lower():
        show_type = "–≤–∑—Ä–æ—Å–ª–æ–µ"
    elif "—Å–µ–º–µ–π–Ω" in text.lower():
        show_type = "—Å–µ–º–µ–π–Ω–æ–µ"
    else:
        show_type = "–Ω–∞—à–µ"

    # üì¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
    send_template_message(
        phone_number_id,
        normalized_number,
        "test_template_1",
        [name, show_type]
    )

    # ‚úâÔ∏è –ò –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞ –±—É–¥—É—â–µ–µ)
    send_text_message(
        phone_number_id,
        normalized_number,
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç {show_type} —à–æ—É, –≤–µ—Ä–Ω–æ?"
    )

def handle_status(status):
    logger.info("üì• –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å: %s", status)

def normalize_for_meta(number):
    if number.startswith('770'):
        return '78' + number[2:]
    return number

def send_text_message(phone_number_id, to, text):
    url = API_URL.format(phone_number_id=phone_number_id)
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "text",
        "text": {
            "body": text
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    logger.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ {to}")
    logger.info("–û—Ç–≤–µ—Ç API WhatsApp: %s %s", response.status_code, response.text)

def send_template_message(phone_number_id, to, template_name, parameters):
    url = API_URL.format(phone_number_id=phone_number_id)
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "template",
        "template": {
            "name": template_name,
            "language": {"code": "ru"},
            "components": [
                {
                    "type": "body",
                    "parameters": [
                        {"type": "text", "text": param} for param in parameters
                    ]
                }
            ]
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    logger.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ {to}")
    logger.info("–û—Ç–≤–µ—Ç API WhatsApp: %s %s", response.status_code, response.text)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
